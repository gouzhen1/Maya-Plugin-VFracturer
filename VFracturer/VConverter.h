/** convert data structures from different API e.g. VMesh to Mesh, MFnMesh to VMesh and vice versa
**  by Zhen Gou, Zhenghan Mei 2014
**/
#ifndef VCONVERTER_H
#define VCONVERTER_H
#include <CGAL/Polyhedron_incremental_builder_3.h>
#include "Mesh.h"
#include "VOperations.h"
#include "VFracturerNode.h"

typedef Polyhedron_3::HalfedgeDS            HalfedgeDS;

template<class HDS>
class polyhedron_3_builder_from_mesh : public CGAL::Modifier_base<HDS> {
public:
	Mesh & m_mesh;
	polyhedron_3_builder_from_mesh(Mesh & m):m_mesh(m){};
	void operator()( HDS& hds) 
	{
		 typedef typename HDS::Vertex   Vertex;
         typedef typename Vertex::Point Point;
		 CGAL::Polyhedron_incremental_builder_3<HDS> B( hds, true);
		 B.begin_surface(m_mesh.numVertices(),m_mesh.numFaces());
		 //load all vertices
		 for(int i=0;i<m_mesh.numVertices();++i)
		 {
			 vec3 v=m_mesh.getVertex(i);
			 B.add_vertex( Point(v[0],v[1],v[2]));
		 }

		 for(int i=0;i<m_mesh.faceList.size();i+=3)
		 {
			 B.begin_facet();
			 B.add_vertex_to_facet(m_mesh.faceList.at(i));
			 B.add_vertex_to_facet(m_mesh.faceList.at(i+1));
			 B.add_vertex_to_facet(m_mesh.faceList.at(i+2));
			 B.end_facet();
		 }
		 B.end_surface();
	}
	
};

class VConverter
{
public:
	
	static void CGAL_Polyhedron_3_to_Mesh(Polyhedron_3 & poly,Mesh & mesh)
	{
		CGAL::Polyhedron_3<K>::Vertex_iterator Viter;
	    CGAL::Polyhedron_3<K>::Facet_iterator Fiter;

		//load vertices
	    for(Viter=poly.vertices_begin();Viter!=poly.vertices_end();++Viter)
	    {
			mesh.addVertex(CGAL::to_double(Viter->point().x()),CGAL::to_double(Viter->point().y()),CGAL::to_double(Viter->point().z()));
	    }
		//load dummy normals
		mesh.init();
		//load faces, normals r auto generated by mesh.addFace
		vector<int> indexList;
		int index;
		for(Fiter=poly.facets_begin();Fiter!=poly.facets_end();++Fiter)
	    {
			indexList.clear();
		    CGAL::Polyhedron_3<K>::Halfedge_around_facet_circulator edge=Fiter->facet_begin();
		    do
		    {
		  	    index=std::distance(poly.vertices_begin(),edge->vertex());
			    indexList.push_back(index);
		    } while (++edge !=Fiter->facet_begin());
			mesh.addFace(indexList);
	    }
	}

	static void mesh_to_CGAL_Polyhedron_3(Mesh & mesh, Polyhedron_3 & poly)
	{
		polyhedron_3_builder_from_mesh<HalfedgeDS> builder(mesh);
		poly.delegate(builder);
	}

	static void MFnMesh_to_mesh(MFnMesh & fmesh, Mesh & mesh)
	{
		MPointArray points;points.clear();
		fmesh.getPoints(points);
		for(int i=0;i<points.length();++i)
		{
			MPoint p=points[i];
			mesh.addVertex(p.x,p.y,p.z);
		}
		mesh.init();
		vector<int> indexList;
		int index;
		for(int i=0;i<fmesh.numPolygons();++i)
		{
			indexList.clear();
			MIntArray V;
			fmesh.getPolygonVertices(i,V);
			int * Varray=new int[V.length()];//delete
			V.get(Varray);
			for(int j=0;j<V.length();++j)
			{
				indexList.push_back(Varray[j]);
			}
			mesh.addFace(indexList);
		}
	}
};

#endif

